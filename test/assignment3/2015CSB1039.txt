 .start:
mov r0,3          @ n is stored here  
mov r1,0x100      @address of A
mov r2,0x200      @address of B
mov r3,0x300      @address of C
mov r11,r1        @to access elements of A
mov r12,r2        @to access elements of B  
mov r13,r3        @to access elements of C

/*storing matrix A*/

mov r4,0          @i
.loopi:
mov r5,0          @j
.loopj:
add r6,r4,r5      @ A[i][j]=i+j
st r6,0[r11]      
add r11,r11,1
add r5,r5,1       
cmp r0,r5
bgt .loopj
add r4,r4,1
cmp r0,r4
bgt .loopi

/*storing matrix B*/
 
mov r4,0          @k
.loopk:
mov r5,0          @l
.loopl:
mul r7,r4,2
mul r8,r5,3
add r6,r7,r8
st r6,0[r12]      @ B[i][j]=2i+3j
add r12,r12,1
add r5,r5,1
cmp r0,r5
bgt .loopl
add r4,r4,1
cmp r0,r4
bgt .loopk

/*multiplying matrices*/

mov r11,r1
mov r12,r2
mov r13,r3
mov r10,0           @sum
mov r4,1            @g
.loopg:  
           
mov r5,1            @h
.looph:

mov r6,1            @f
.loopf:
ld r8,0[r11]
ld r9,0[r12]
mul r7,r8,r9
add r10,r10,r7
add r11,r11,1      @ iterator for A (row needed)
add r12,r12,r0     @ iterator for B (column needed) 
add r6,r6,1        
cmp r0,r6
bgt .loopf
beq .loopf

st r10,0[r13]
mov r10,0
add r13,r13,1
add r12,r2,r5      @ B iterator = &B + h - going to next column
mul r10,r0,r4      
add r11,r1,r10     
sub r11,r11,r0     @iterator of A = &A+((n-1)*g)  resets row to multiply with next column
mov r10,0
add r5,r5,1
cmp r0,r5
bgt .looph
beq .looph

mul r10,r4,r0
add r11,r1,r10    @ iterator of A= &A+ (n*g)  taking next row
mov r12,r2        @ reseting column
mov r10,0
add r4,r4,1
cmp r0,r4
bgt .loopg
beq .loopg

/*printing*/

mov r10,0
.loopp:
add r12,r3,r10
ld r11,0[r12]
.print r11
mul r13,r0,r0
add r10,r10,1
cmp r10,r13
beq .exit
b .loopp

.exit:




