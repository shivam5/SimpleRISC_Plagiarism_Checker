.main:
	mov r1,10	//a=10
	mov r2,12	//b=12
	mov r3,-1	//c=-1
	mov r10,0 	//i = 0
	b .f            //calling .f

.f:
	cmp r10,4           //i<5
	bgt .retf           //exit from from loop
	add r1,r2,r3        //a = b+c
	sub r2,r1,r3        //b = a-c
	mov r6,r1 	    // making copy of a
	mov r7,r2	    //making copy of b
	mov r8,r3           //making copy of c
	call .g             //calling  .g
	add r3,r3,r9	    //c = c + g(a,b,c)
	add r10,r10,1	    //i++
	b .f                //go to .f again

.retf:
	add r0,r1,r2	    //add d = a+b
	add r0,r0,r3       //d = a + b+c
	.print r0           //printing final result i.e. d
	b .exit             //exit

.g:
	mov r13,0
	b .h	           // h returns r12
	.ret0again:
		mov r6,r12       //new value of a
		mov r13,1        
		b .h
		.ret1again:
			mov r7,r12     //new value of b
			mov r13,2
			b .h            
			.ret2again:
				mov r8,r12    //new value of c
				add r9,r6,r7
				add r9,r9,r8     //storing (a+b+c) in r9
				ret              //return from g

.h:
	cmp r13,0      //case:0 i.e. d==0
	beq .ret0
	cmp r13,1      //case:1 i.e. d==1
	beq .ret1
	cmp r13,2      //case:2 i.e. d==2
	beq .ret2

.ret0:
	add r12,r6,r7     
	sub r12,r12,r8       //(a+b-c)
	b .ret0again

.ret1:
	sub r12,r6,r7
	add r12,r12,r8       //(a-b+c)
	b .ret1again

.ret2:
	add r12,r6,r8
	add r12,r12,r7       //(a+b+c)
	b .ret2again

.exit: 
